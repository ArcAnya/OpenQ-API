// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Bounty {
  address         String        @id @map("_id")
  tvl             Float
  tvc             Float?
  bountyId        String        @unique
  watchingUserIds String[]
  watchingUsers   User[]        @relation(fields: [watchingUserIds], references: [address])
  createdAt       DateTime      @default(now())
  prs             Pr[]
  views           Int           @default(0)
  blacklisted     Boolean       @default(false)
  type            String
  category        String?
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?
  repositoryId    String?
  repository      Repository?   @relation(fields: [repositoryId], references: [id])
}

model Contributor {
  userId  String   @id @map("_id")
  address String
  prs     Pr[]     @relation(fields: [prIds], references: [prId])
  prIds   String[]
}

model Pr {
  prId           String        @id @map("_id")
  thumbnail      String?
  contributorIds String[]
  contributors   Contributor[] @relation(fields: [contributorIds], references: [userId])
  Bounty         Bounty?       @relation(fields: [bountyAddress], references: [address])
  bountyAddress  String?
}

model Repository {
  id             String       @id @map("_id") // this would be the repository node ID in the Github API
  // connect to bounties, users and organizations
  participantIds String[]
  participants   User[]       @relation(fields: [participantIds], references: [address])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  Bounty         Bounty[]
}

model User {
  address                 String         @id @map("_id")
  watchedBountyIds        String[]
  watchedBounties         Bounty[]       @relation(fields: [watchedBountyIds], references: [address])
  starredOrganizationIds  String[]
  starredOrganizations    Organization[] @relation(fields: [starredOrganizationIds], references: [id])
  repositoryIds           String[]
  participantRepositories Repository[]   @relation(fields: [repositoryIds], references: [id])
  company                 String?
  email                   String?
  city                    String?
  streetAddress           String?
  country                 String?
  province                String?
  discord                 String?
  github                  String?
  twitter                 String?
  role                    String?
}

model Organization {
  id              String       @id @map("_id")
  blacklisted     Boolean      @default(false)
  starringUserIds String[]
  starringUsers   User[]       @relation(fields: [starringUserIds], references: [address])
  repositories    Repository[]
  Bounty          Bounty[]
}

model Prices {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  pricesId  String @unique
  priceObj  Json?
  timestamp Int
}
